package com.myShop.controller;


import com.myShop.domain.PaymentMethod;
import com.myShop.entity.*;
import com.myShop.response.PaymentLinkResponse;
import com.myShop.service.*;
import lombok.RequiredArgsConstructor;
import org.aspectj.weaver.ast.Or;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Set;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/orders")
public class OrderController {

    private final OrderService orderService;
    private final UserService userService;
    private final CartService cartService;
    private final SellerService sellerService;
    private final SellerReportService sellerReportService;
//    private final PaymentService paymentService;


    @PostMapping()
    public ResponseEntity<PaymentLinkResponse>createOrderHandler(
            @RequestBody Address shippingAddress,
            @RequestParam PaymentMethod paymentMethod,
            @RequestHeader("Authorization") String jwt
            )throws Exception{

        User user=userService.findUserByJwtToken(jwt);
        Cart cart=cartService.findUserCart(user);
        Set<Order> orders=orderService.createOrder(user,shippingAddress,cart);

//      when payment gateway add when write
//        PaymentOrder paymentOrder=paymentService
        PaymentLinkResponse res=new PaymentLinkResponse();

        return new ResponseEntity<>(res, HttpStatus.OK);

    }

    @GetMapping("/user")
    public ResponseEntity<List<Order>> userOrderHistoryHandler(
        @RequestHeader("Authorization") String jwt
    ) throws Exception{

        User user=userService.findUserByJwtToken(jwt);
        List<Order> orders=orderService.userOrderHistory(user.getId());
        return new ResponseEntity<>(orders,HttpStatus.ACCEPTED);

    }

    @GetMapping("{orderId}")
    public ResponseEntity<Order>getOrderById(
            @PathVariable Long orderId,
            @RequestHeader("Authorization") String jwt
    ) throws Exception{
        User user=userService.findUserByJwtToken(jwt);
        Order orders=orderService.findOrderById(orderId);

        return new ResponseEntity<>(orders,HttpStatus.ACCEPTED);
    }

    @GetMapping("/item/{orderItemId}")
    public ResponseEntity<OrderItem> getOrderItemById(
            @PathVariable Long orderItemId,
            @RequestHeader("Authorization") String jwt
    ) throws Exception{

        User user=userService.findUserByJwtToken(jwt);
        OrderItem orderItem=orderService.getOrderItemById(orderItemId);

        return new ResponseEntity<>(orderItem,HttpStatus.ACCEPTED);
    }

    @PutMapping("{orderId/cancel}")
    public ResponseEntity<Order>cancelOrder(
            @PathVariable Long orderId,
            @RequestHeader("Authorization") String jwt
    )throws Exception{

        User user=userService.findUserByJwtToken(jwt);
        Order order=orderService.cancelOrder(orderId,user);


        Seller seller=sellerService.getSellerById(order.getSellerId());
        SellerReport report=sellerReportService.getSellerReport(seller);

        report.setCancelledOrders(report.getCancelledOrders()+1);
        report.setTotalRefunds(report.getTotalRefunds()+order.getTotalSellingPrince());

        return ResponseEntity.ok(order);
    }

}
