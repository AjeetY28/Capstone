package com.myShop.service.impl;

import com.myShop.config.JwtProvider;
import com.myShop.domain.AccountStatus;
import com.myShop.domain.USER_ROLE;
import com.myShop.entity.Address;
import com.myShop.entity.Seller;
import com.myShop.repository.AddressRepository;
import com.myShop.repository.SellerRepository;
import com.myShop.service.SellerService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class SellerServiceImpl implements SellerService {

    private final SellerRepository sellerRepository;
    private final JwtProvider jwtProvider;
    private final PasswordEncoder passwordEncoder;
    private final AddressRepository addressRepository;

    @Override
    public Seller getSellerProfile(String jwt) throws Exception {
        String email=jwtProvider.getEmailFromJwtToken(jwt);
        return this.getSellerByEmail(email);
    }

    @Override
    public Seller createSeller(Seller seller) throws Exception {
        Seller sellerExists=sellerRepository.findByEmail(seller.getEmail());
        if(sellerExists!=null)
        {
            throw new Exception("Seller already exists,use different email");
        }
        Address savedAddress=addressRepository.save(seller.getPickupAddress());

        Seller newSeller=new Seller();
        newSeller.setEmail(seller.getEmail());
        newSeller.setPassword(passwordEncoder.encode(seller.getPassword()));
        newSeller.setSellerName(seller.getSellerName());
        newSeller.setPickupAddress(savedAddress);
        newSeller.setGSTIN(seller.getGSTIN());
        newSeller.setRole(USER_ROLE.ROLE_SELLER);
        newSeller.setPhone(seller.getPhone());
        newSeller.setBankDetails(seller.getBankDetails());
        newSeller.setBusinessDetails(seller.getBusinessDetails());

        sellerRepository.save(newSeller);

        return newSeller;
    }

    @Override
    public Seller getSellerById(Long id) throws Exception {

        return sellerRepository.findById(id)
                .orElseThrow(()->new Exception("Seller not find with the id....."+id));
    }

    @Override
    public Seller getSellerByEmail(String email) throws Exception {
        Seller seller=sellerRepository.findByEmail(email);
        if(seller!=null)
        {
            throw new Exception("Seller not found......");
        }

        return seller;
    }

    @Override
    public List<Seller> getAllSellers(AccountStatus status) {

        return sellerRepository.findByAccountStatus(status);
    }

    @Override
    public Seller updateSeller(Seller seller, Long id) {
        
        return null;
    }

    @Override
    public void deleteSeller(Long id) {

    }

    @Override
    public Seller verifyEmail(String email, String otp) {
        return null;
    }

    @Override
    public Seller updateSellerStatus(Long sellerId, AccountStatus status) {
        return null;
    }
}
